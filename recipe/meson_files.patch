diff --git a/meson.build b/meson.build
index 48f8309..c94fadd 100644
--- a/meson.build
+++ b/meson.build
@@ -15,6 +15,7 @@ project(
 cc = meson.get_compiler('c')
 add_languages('fortran', native: false)
 fc = meson.get_compiler('fortran')
+message(fc.get_id())
 is_windows = host_machine.system() == 'windows'
 
 # We need -lm for all C code (assuming it uses math functions, which is safe to
@@ -26,34 +27,48 @@ if m_dep.found()
 endif
 
 # Adding at project level causes many spurious -lgfortran flags.
+if fc.has_argument('-Wno-conversion')
+  add_project_arguments('-Wno-conversion', language: 'fortran')
+endif
+
 _fflags = []
 if fc.get_id() in ['intel', 'intel-llvm']
   _fflags = fc.get_supported_arguments('-qmkl')
+  _fflags += fc.get_supported_arguments('-fp-model=strict')
+  minus0_arg = ['-assume', 'minus0']
+  if fc.has_multi_arguments(minus0_arg)
+    _fflags += minus0_arg
+  endif
 elif fc.get_id() in ['intel-cl', 'intel-llvm-cl']
   # Intel Fortran on Windows does things differently, so deal with that
   # (also specify dynamic linking and the right name mangling)
   _fflags = fc.get_supported_arguments('/qmkl')
+  _fflags += fc.get_supported_arguments(
+    '/fp:strict', '/MD', '/names:lowercase', '/assume:underscore',
+    '/assume:minus0'
+    )  
+elif fc.get_id() in ['flang']
+  _fflags = fc.get_supported_arguments('-Xflang -Wno-everything')
 else
   _fflags = fc.get_supported_arguments('-fdec-math')
   _fflags += fc.get_supported_arguments('-fno-align-commons')
 endif
 add_project_arguments(_fflags, language: 'fortran')
 
+
 omp = dependency('openmp', required: false)
 if not omp.found()
-  if fc.get_id() == 'intel'
-    omp = declare_dependency(
-      link_args: '-qopenmp',
-    )
+  if fc.get_id() in ['intel', 'intel-llvm']
+    omp = declare_dependency(link_args: '-qopenmp')
+  elif fc.get_id() in ['intel-cl', 'intel-llvm-cl']
+    omp = declare_dependency(link_args: '/qopenmp')
   else
-    omp = declare_dependency(
-      link_args: '-fopenmp',
-    )
+    omp = declare_dependency(link_args: '-fopenmp')
   endif
 endif
 
 # Need lapack via OpenBlas preferably
-lapack = dependency('openblas', 'mkl_rt', 'blas', 'lapack', required: true)
+lapack = dependency('openblas', 'mkl', 'lapack', 'blas', required: true)
 
 # https://mesonbuild.com/Python-module.html
 # Here we differentiate from the python used by meson, py3_command, and that python target, py3_target. This is useful
